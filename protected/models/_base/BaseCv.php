<?php

/**
 * This is the model base class for the table "cv".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Cv".
 *
 * Columns in table "cv" available as properties of the model,
 * followed by relations of table "cv" available as properties of the model.
 *
 * @property integer $id
 * @property string $title
 * @property string $name
 * @property string $surname
 * @property string $birthdate
 * @property string $contact_number
 * @property string $email
 * @property string $district
 * @property string $major
 * @property integer $graduated_year
 * @property string $language
 * @property string $language_level
 * @property integer $experience
 * @property integer $job_function_year
 * @property string $computer_skill
 * @property integer $salary_min
 * @property integer $salary_max
 * @property integer $country_id
 * @property integer $province_id
 * @property integer $nationality_id
 * @property integer $highest_edu_level_id
 * @property integer $user_id
 * @property integer $graduated_country_id
 * @property string $status
 * @property string $photo
 * @property string $is_lock
 *
 * @property Country $country
 * @property Country $graduatedCountry
 * @property HighestEduLevel $highestEduLevel
 * @property Nationality $nationality
 * @property Province $province
 * @property User $user
 * @property CvAttachFile[] $cvAttachFiles
 * @property JobFunction[] $jobFunctions
 * @property Province[] $provinces
 */
abstract class BaseCv extends AweActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'cv';
    }

    public static function representingColumn() {
        return 'title';
    }

    public function rules() {
        return array(
            array('title, name, surname, birthdate, contact_number, email, district, major, graduated_year, salary_min, salary_max, country_id, province_id, nationality_id, highest_edu_level_id, user_id, graduated_country_id, status', 'required'),
            array('graduated_year, experience, job_function_year, salary_min, salary_max, country_id, province_id, nationality_id, highest_edu_level_id, user_id, graduated_country_id', 'numerical', 'integerOnly'=>true),
            array('title, name, surname, contact_number, email, district, major, language, language_level, computer_skill, photo', 'length', 'max'=>255),
            array('status', 'length', 'max'=>9),
            array('is_lock', 'length', 'max'=>1),
            array('language, language_level, experience, job_function_year, computer_skill, photo, is_lock', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, title, name, surname, birthdate, contact_number, email, district, major, graduated_year, language, language_level, experience, job_function_year, computer_skill, salary_min, salary_max, country_id, province_id, nationality_id, highest_edu_level_id, user_id, graduated_country_id, status, photo, is_lock', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
            'country' => array(self::BELONGS_TO, 'Country', 'country_id'),
            'graduatedCountry' => array(self::BELONGS_TO, 'Country', 'graduated_country_id'),
            'highestEduLevel' => array(self::BELONGS_TO, 'HighestEduLevel', 'highest_edu_level_id'),
            'nationality' => array(self::BELONGS_TO, 'Nationality', 'nationality_id'),
            'province' => array(self::BELONGS_TO, 'Province', 'province_id'),
            'user' => array(self::BELONGS_TO, 'User', 'user_id'),
            'cvAttachFiles' => array(self::HAS_MANY, 'CvAttachFile', 'cv_id'),
            'jobFunctions' => array(self::MANY_MANY, 'JobFunction', 'cv_has_job_function(cv_id, job_function_id)'),
            'provinces' => array(self::MANY_MANY, 'Province', 'cv_has_province(cv_id, province_id)'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'id' => Yii::t('app', 'ID'),
                'title' => Yii::t('app', 'Title'),
                'name' => Yii::t('app', 'Name'),
                'surname' => Yii::t('app', 'Surname'),
                'birthdate' => Yii::t('app', 'Birthdate'),
                'contact_number' => Yii::t('app', 'Contact Number'),
                'email' => Yii::t('app', 'Email'),
                'district' => Yii::t('app', 'District'),
                'major' => Yii::t('app', 'Major'),
                'graduated_year' => Yii::t('app', 'Graduated Year'),
                'language' => Yii::t('app', 'Language'),
                'language_level' => Yii::t('app', 'Language Level'),
                'experience' => Yii::t('app', 'Experience'),
                'job_function_year' => Yii::t('app', 'Job Function Year'),
                'computer_skill' => Yii::t('app', 'Computer Skill'),
                'salary_min' => Yii::t('app', 'Salary Min'),
                'salary_max' => Yii::t('app', 'Salary Max'),
                'country_id' => Yii::t('app', 'Country'),
                'province_id' => Yii::t('app', 'Province'),
                'nationality_id' => Yii::t('app', 'Nationality'),
                'highest_edu_level_id' => Yii::t('app', 'Highest Edu Level'),
                'user_id' => Yii::t('app', 'User'),
                'graduated_country_id' => Yii::t('app', 'Graduated Country'),
                'status' => Yii::t('app', 'Status'),
                'photo' => Yii::t('app', 'Photo'),
                'is_lock' => Yii::t('app', 'Is Lock'),
                'country' => null,
                'graduatedCountry' => null,
                'highestEduLevel' => null,
                'nationality' => null,
                'province' => null,
                'user' => null,
                'cvAttachFiles' => null,
                'jobFunctions' => null,
                'provinces' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('title', $this->title, true);
        $criteria->compare('name', $this->name, true);
        $criteria->compare('surname', $this->surname, true);
        $criteria->compare('birthdate', $this->birthdate, true);
        $criteria->compare('contact_number', $this->contact_number, true);
        $criteria->compare('email', $this->email, true);
        $criteria->compare('district', $this->district, true);
        $criteria->compare('major', $this->major, true);
        $criteria->compare('graduated_year', $this->graduated_year);
        $criteria->compare('language', $this->language, true);
        $criteria->compare('language_level', $this->language_level, true);
        $criteria->compare('experience', $this->experience);
        $criteria->compare('job_function_year', $this->job_function_year);
        $criteria->compare('computer_skill', $this->computer_skill, true);
        $criteria->compare('salary_min', $this->salary_min);
        $criteria->compare('salary_max', $this->salary_max);
        $criteria->compare('country_id', $this->country_id);
        $criteria->compare('province_id', $this->province_id);
        $criteria->compare('nationality_id', $this->nationality_id);
        $criteria->compare('highest_edu_level_id', $this->highest_edu_level_id);
        $criteria->compare('user_id', $this->user_id);
        $criteria->compare('graduated_country_id', $this->graduated_country_id);
        $criteria->compare('status', $this->status, true);
        $criteria->compare('photo', $this->photo, true);
        $criteria->compare('is_lock', $this->is_lock, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function behaviors() {
        return array_merge(array(
        ), parent::behaviors());
    }
}