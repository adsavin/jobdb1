<?php

/**
 * This is the model base class for the table "invoice".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Invoice".
 *
 * Columns in table "invoice" available as properties of the model,
 * followed by relations of table "invoice" available as properties of the model.
 *
 * @property integer $id
 * @property string $no
 * @property string $created_date
 * @property integer $user_id
 * @property string $payment_status
 * @property integer $discount
 * @property integer $total
 * @property integer $company_id
 * @property integer $no_of_week
 * @property integer $no_of_position
 * @property integer $net_total
 * @property integer $priceperweek
 *
 * @property Company $company
 * @property User $user
 * @property Publish[] $publishes
 */
abstract class BaseInvoice extends AweActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'invoice';
    }

    public static function representingColumn() {
        return 'no';
    }

    public function rules() {
        return array(
            array('no, created_date, user_id, total, company_id, no_of_week, no_of_position, net_total, priceperweek', 'required'),
            array('user_id, discount, total, company_id, no_of_week, no_of_position, net_total, priceperweek', 'numerical', 'integerOnly'=>true),
            array('no', 'length', 'max'=>255),
            array('payment_status', 'length', 'max'=>8),
            array('payment_status, discount', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, no, created_date, user_id, payment_status, discount, total, company_id, no_of_week, no_of_position, net_total, priceperweek', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
            'company' => array(self::BELONGS_TO, 'Company', 'company_id'),
            'user' => array(self::BELONGS_TO, 'User', 'user_id'),
            'publishes' => array(self::HAS_MANY, 'Publish', 'invoice_id'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'id' => Yii::t('app', 'ID'),
                'no' => Yii::t('app', 'No'),
                'created_date' => Yii::t('app', 'Created Date'),
                'user_id' => Yii::t('app', 'User'),
                'payment_status' => Yii::t('app', 'Payment Status'),
                'discount' => Yii::t('app', 'Discount'),
                'total' => Yii::t('app', 'Total'),
                'company_id' => Yii::t('app', 'Company'),
                'no_of_week' => Yii::t('app', 'No Of Week'),
                'no_of_position' => Yii::t('app', 'No Of Position'),
                'net_total' => Yii::t('app', 'Net Total'),
                'priceperweek' => Yii::t('app', 'Priceperweek'),
                'company' => null,
                'user' => null,
                'publishes' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('no', $this->no, true);
        $criteria->compare('created_date', $this->created_date, true);
        $criteria->compare('user_id', $this->user_id);
        $criteria->compare('payment_status', $this->payment_status, true);
        $criteria->compare('discount', $this->discount);
        $criteria->compare('total', $this->total);
        $criteria->compare('company_id', $this->company_id);
        $criteria->compare('no_of_week', $this->no_of_week);
        $criteria->compare('no_of_position', $this->no_of_position);
        $criteria->compare('net_total', $this->net_total);
        $criteria->compare('priceperweek', $this->priceperweek);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function behaviors() {
        return array_merge(array(
        ), parent::behaviors());
    }
}