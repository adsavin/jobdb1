<?php

/**
 * This is the model base class for the table "job_content".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "JobContent".
 *
 * Columns in table "job_content" available as properties of the model,
 * followed by relations of table "job_content" available as properties of the model.
 *
 * @property integer $id
 * @property string $job_reference_number
 * @property string $job_title
 * @property string $content
 * @property string $status
 * @property string $created_date
 * @property double $count_view
 * @property double $count_like
 * @property string $closed_date
 * @property string $hot_job
 * @property string $last_update
 * @property integer $province_id
 * @property integer $user_id
 * @property integer $job_function_id
 * @property integer $job_type_id
 * @property integer $company_id
 *
 * @property AttatchFile[] $attatchFiles
 * @property User $user
 * @property Company $company
 * @property JobFunction $jobFunction
 * @property JobType $jobType
 * @property Province $province
 * @property JobContentTranslate $jobContentTranslate
 * @property Publish[] $publishes
 */
abstract class BaseJobContent extends AweActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'job_content';
    }

    public static function representingColumn() {
        return 'job_title';
    }

    public function rules() {
        return array(
            array('job_title, content, status, created_date, hot_job, last_update, user_id, job_function_id, job_type_id, company_id', 'required'),
            array('province_id, user_id, job_function_id, job_type_id, company_id', 'numerical', 'integerOnly'=>true),
            array('count_view, count_like', 'numerical'),
            array('job_reference_number', 'length', 'max'=>45),
            array('job_title', 'length', 'max'=>255),
            array('status', 'length', 'max'=>12),
            array('hot_job', 'length', 'max'=>3),
            array('closed_date', 'safe'),
            array('job_reference_number, count_view, count_like, closed_date, province_id', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, job_reference_number, job_title, content, status, created_date, count_view, count_like, closed_date, hot_job, last_update, province_id, user_id, job_function_id, job_type_id, company_id', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
            'attatchFiles' => array(self::HAS_MANY, 'AttatchFile', 'job_content_id'),
            'user' => array(self::BELONGS_TO, 'User', 'user_id'),
            'company' => array(self::BELONGS_TO, 'Company', 'company_id'),
            'jobFunction' => array(self::BELONGS_TO, 'JobFunction', 'job_function_id'),
            'jobType' => array(self::BELONGS_TO, 'JobType', 'job_type_id'),
            'province' => array(self::BELONGS_TO, 'Province', 'province_id'),
            'jobContentTranslate' => array(self::HAS_ONE, 'JobContentTranslate', 'job_content_id'),
            'publishes' => array(self::HAS_MANY, 'Publish', 'job_content_id'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'id' => Yii::t('app', 'ID'),
                'job_reference_number' => Yii::t('app', 'Job Reference Number'),
                'job_title' => Yii::t('app', 'Job Title'),
                'content' => Yii::t('app', 'Content'),
                'status' => Yii::t('app', 'Status'),
                'created_date' => Yii::t('app', 'Created Date'),
                'count_view' => Yii::t('app', 'Count View'),
                'count_like' => Yii::t('app', 'Count Like'),
                'closed_date' => Yii::t('app', 'Closed Date'),
                'hot_job' => Yii::t('app', 'Hot Job'),
                'last_update' => Yii::t('app', 'Last Update'),
                'province_id' => Yii::t('app', 'Province'),
                'user_id' => Yii::t('app', 'User'),
                'job_function_id' => Yii::t('app', 'Job Function'),
                'job_type_id' => Yii::t('app', 'Job Type'),
                'company_id' => Yii::t('app', 'Company'),
                'attatchFiles' => null,
                'user' => null,
                'company' => null,
                'jobFunction' => null,
                'jobType' => null,
                'province' => null,
                'jobContentTranslate' => null,
                'publishes' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('job_reference_number', $this->job_reference_number, true);
        $criteria->compare('job_title', $this->job_title, true);
        $criteria->compare('content', $this->content, true);
        $criteria->compare('status', $this->status, true);
        $criteria->compare('created_date', $this->created_date, true);
        $criteria->compare('count_view', $this->count_view);
        $criteria->compare('count_like', $this->count_like);
        $criteria->compare('closed_date', $this->closed_date, true);
        $criteria->compare('hot_job', $this->hot_job, true);
        $criteria->compare('last_update', $this->last_update, true);
        $criteria->compare('province_id', $this->province_id);
        $criteria->compare('user_id', $this->user_id);
        $criteria->compare('job_function_id', $this->job_function_id);
        $criteria->compare('job_type_id', $this->job_type_id);
        $criteria->compare('company_id', $this->company_id);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function behaviors() {
        return array_merge(array(
        ), parent::behaviors());
    }
}